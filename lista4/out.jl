using JuMP
using GLPK

maxFlow = Model(GLPK.Optimizer)

# f[i, j] - flow from node i to node j - nodes are from 1 to 2^k
@variable(maxFlow, f[1:8, 1:8] >= 0)

# Capacities of given arc
@constraint(maxFlow, f[1, 2] <= 1)
@constraint(maxFlow, f[1, 3] <= 1)
@constraint(maxFlow, f[1, 5] <= 8)
@constraint(maxFlow, f[2, 4] <= 3)
@constraint(maxFlow, f[2, 6] <= 3)
@constraint(maxFlow, f[3, 4] <= 4)
@constraint(maxFlow, f[3, 7] <= 1)
@constraint(maxFlow, f[4, 8] <= 8)
@constraint(maxFlow, f[5, 6] <= 4)
@constraint(maxFlow, f[5, 7] <= 4)
@constraint(maxFlow, f[6, 8] <= 6)
@constraint(maxFlow, f[7, 8] <= 3)
@constraint(maxFlow, f[1, 1] <= 0 )
@constraint(maxFlow, f[1, 4] <= 0 )
@constraint(maxFlow, f[1, 6] <= 0 )
@constraint(maxFlow, f[1, 7] <= 0 )
@constraint(maxFlow, f[1, 8] <= 0 )
@constraint(maxFlow, f[2, 1] <= 0 )
@constraint(maxFlow, f[2, 2] <= 0 )
@constraint(maxFlow, f[2, 3] <= 0 )
@constraint(maxFlow, f[2, 5] <= 0 )
@constraint(maxFlow, f[2, 7] <= 0 )
@constraint(maxFlow, f[2, 8] <= 0 )
@constraint(maxFlow, f[3, 1] <= 0 )
@constraint(maxFlow, f[3, 2] <= 0 )
@constraint(maxFlow, f[3, 3] <= 0 )
@constraint(maxFlow, f[3, 5] <= 0 )
@constraint(maxFlow, f[3, 6] <= 0 )
@constraint(maxFlow, f[3, 8] <= 0 )
@constraint(maxFlow, f[4, 1] <= 0 )
@constraint(maxFlow, f[4, 2] <= 0 )
@constraint(maxFlow, f[4, 3] <= 0 )
@constraint(maxFlow, f[4, 4] <= 0 )
@constraint(maxFlow, f[4, 5] <= 0 )
@constraint(maxFlow, f[4, 6] <= 0 )
@constraint(maxFlow, f[4, 7] <= 0 )
@constraint(maxFlow, f[5, 1] <= 0 )
@constraint(maxFlow, f[5, 2] <= 0 )
@constraint(maxFlow, f[5, 3] <= 0 )
@constraint(maxFlow, f[5, 4] <= 0 )
@constraint(maxFlow, f[5, 5] <= 0 )
@constraint(maxFlow, f[5, 8] <= 0 )
@constraint(maxFlow, f[6, 1] <= 0 )
@constraint(maxFlow, f[6, 2] <= 0 )
@constraint(maxFlow, f[6, 3] <= 0 )
@constraint(maxFlow, f[6, 4] <= 0 )
@constraint(maxFlow, f[6, 5] <= 0 )
@constraint(maxFlow, f[6, 6] <= 0 )
@constraint(maxFlow, f[6, 7] <= 0 )
@constraint(maxFlow, f[7, 1] <= 0 )
@constraint(maxFlow, f[7, 2] <= 0 )
@constraint(maxFlow, f[7, 3] <= 0 )
@constraint(maxFlow, f[7, 4] <= 0 )
@constraint(maxFlow, f[7, 5] <= 0 )
@constraint(maxFlow, f[7, 6] <= 0 )
@constraint(maxFlow, f[7, 7] <= 0 )
@constraint(maxFlow, f[8, 1] <= 0 )
@constraint(maxFlow, f[8, 2] <= 0 )
@constraint(maxFlow, f[8, 3] <= 0 )
@constraint(maxFlow, f[8, 4] <= 0 )
@constraint(maxFlow, f[8, 5] <= 0 )
@constraint(maxFlow, f[8, 6] <= 0 )
@constraint(maxFlow, f[8, 7] <= 0 )
@constraint(maxFlow, f[8, 8] <= 0 )

# Flow must be balanced
@constraint(maxFlow, [i = 2:7], sum(f[i, :]) == sum(f[:, i]))
@constraint(maxFlow, sum(f[1, :]) == sum(f[:, 8]))

# Maximize the flow
@objective(maxFlow, Max, sum(f[1, :]))
optimize!(maxFlow)

# Print results
println(objective_value(maxFlow))
